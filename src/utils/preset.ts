import { colord } from 'colord'
import daisyThemeDefaults from 'daisyui/src/theming/themeDefaults'
import { Preflight, mergeDeep } from 'unocss'
import { convertThemeColors } from '../default-themes'
import {
  DaisyColors,
  DaisyGeneratedTheme,
  DaisyDefaultThemeNames,
  DaisyExtendTheme,
} from '../types'
import { kebabCase } from './case'

export const defaultSelectorFn = (themeName: string) => {
  return `[data-theme="${themeName}"]`
}

export const getSelectors = (
  themeNames: string[],
  selectorFn = defaultSelectorFn
) => {
  const selectors: Record<string, string> = {}

  for (const themeName of themeNames) {
    if (themeName === 'light') {
      selectors.light = ':root'
    } else {
      selectors[themeName] = selectorFn(themeName)
    }
  }

  return selectors
}

const getThemeVarsPreflight = (
  theme: DaisyExtendTheme,
  themeName: string,
  selectors: Record<string, string>,
  layer: string
): Preflight | undefined => {
  if (theme.variables) {
    return {
      getCSS: () => {
        const selector = selectors[themeName] ?? `[data-theme="${themeName}"]`

        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const declarations = Object.entries(theme.variables!).map(
          ([key, value]) => {
            return `${kebabCase(key)}:${value}`
          }
        )

        return `${selector} { ${declarations.join(';')} }`
      },
      layer,
    }
  }
}

export const extractVarsPreflights = (
  themes: Record<string, DaisyExtendTheme>,
  selectors: Record<string, string>,
  layer: string
): Preflight[] => {
  const preflights: Preflight[] = []

  // Process default themes in order
  for (const themeName of daisyThemeDefaults.themeOrder) {
    const existingDefaultTheme = themes[themeName]

    if (!existingDefaultTheme) {
      continue
    }

    const preflight = getThemeVarsPreflight(
      existingDefaultTheme,
      themeName,
      selectors,
      layer
    )

    if (preflight) {
      preflights.push(preflight)
    }
  }

  for (const [themeName, theme] of Object.entries(themes)) {
    if (!daisyThemeDefaults.themeOrder.includes(themeName) && theme.variables) {
      const preflight = getThemeVarsPreflight(
        theme,
        themeName,
        selectors,
        layer
      )

      if (preflight) {
        preflights.push(preflight)
      }
    }
  }

  return preflights
}

export const prefixThemeVars = (
  theme: DaisyExtendTheme,
  prefix: string
): void => {
  if (!theme.variables) {
    return
  }

  const variables: Record<string, string> = {}

  for (const [key, value] of Object.entries(theme.variables)) {
    if (key.startsWith('--')) {
      variables[`${prefix}${kebabCase(key.slice(2))}`] = value

      continue
    }

    variables[`${prefix}${kebabCase(key)}`] = value
  }

  theme.variables = variables
}

const extractSimpleColors = (colors: DaisyColors) => {
  const simpleColors: Record<string, string> = {}

  for (const [key, value] of Object.entries(colors)) {
    if (typeof value === 'string') {
      simpleColors[key] = value
    }
  }

  return simpleColors
}

export const inheritTheme = (
  theme: DaisyExtendTheme,
  themeName: DaisyDefaultThemeNames,
  defaultThemes: Record<string, DaisyExtendTheme>
): DaisyExtendTheme => {
  const inheritedTheme = defaultThemes[themeName]

  if (!inheritedTheme) {
    return theme
  }

  return mergeDeep<DaisyExtendTheme>(inheritedTheme, theme)
}

export const transformTheme = (
  theme: DaisyExtendTheme,
  defaultThemes: Record<string, DaisyExtendTheme>
): DaisyExtendTheme => {
  let inheritedTheme: DaisyExtendTheme = theme

  if (theme.inherit) {
    // Inherit from default themes
    // Color generated by daisy will override default theme colors
    inheritedTheme = inheritTheme(theme, theme.inherit, defaultThemes)
  }

  const themeColors = inheritedTheme.colors ?? {}
  // Only simple colors (string) will be generated
  const simpleColors = extractSimpleColors(themeColors)
  // Generate daisy color variants
  const convertedThemeColors = convertThemeColors(simpleColors)

  const { colors, variables, fontFamily, colorScheme } = convertedThemeColors

  const propsNoColors: DaisyExtendTheme = {
    variables: variables ?? {},
    fontFamily: fontFamily ?? {},
    colorScheme: colorScheme ?? '',
  }

  const convertedColors: DaisyExtendTheme = {
    colors: colors ?? {},
  }

  return mergeDeep<DaisyExtendTheme>(
    // First merge variables and font family
    // Values from theme (variables, font-family, etc) will override default values
    mergeDeep<DaisyExtendTheme>(propsNoColors, inheritedTheme),
    // Then merge colors generated by daisy
    convertedColors
  )
}

export const themeColorsToHSL = (themeColors: DaisyColors): DaisyColors => {
  const convertedColors: DaisyColors = {}

  for (const [key, value] of Object.entries(themeColors)) {
    convertedColors[key] =
      typeof value === 'string'
        ? colord(value).toHslString()
        : themeColorsToHSL(value) // Recursively convert nested colors
  }

  return convertedColors
}

export const processThemes = (
  themes: Record<string, DaisyExtendTheme>,
  defaultThemes: Record<string, DaisyGeneratedTheme>,
  varsPrefix: string
): typeof themes => {
  const processedThemes: Record<string, DaisyExtendTheme> = {}

  for (const [themeName, theme] of Object.entries(themes)) {
    // Convert camelCase variable names to kebab-case
    prefixThemeVars(theme, '--')

    const processedTheme = transformTheme(theme, defaultThemes)

    // Add variables prefix
    prefixThemeVars(processedTheme, varsPrefix)

    if (processedTheme.colors) {
      processedTheme.colors = themeColorsToHSL(processedTheme.colors)
    }

    // Add color-scheme to variables
    if (processedTheme.colorScheme) {
      processedTheme.variables = {
        'color-scheme': processedTheme.colorScheme,
        ...processedTheme.variables,
      }
    }

    processedThemes[themeName] = processedTheme
  }

  return processedThemes
}
