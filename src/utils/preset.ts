import { colord } from 'colord'
import { Rule, RuleMeta, Shortcut, mergeDeep, resolveShortcuts } from 'unocss'
import { convertThemeColors } from '../default-themes'
import { GeneratedShortcutsIterable } from '../generate/types'
import {
  DaisyColors,
  DaisyDefaultThemeNames,
  DaisyExtendTheme,
  DaisyGeneratedTheme,
  DaisySelectorFn,
  DaisySelectors,
  DaisyThemes,
  DaisyThemesOrNot,
} from '../types'
import { kebabCase } from './case'
import { entriesIterable } from './object'
import {
  DynamicShortcutStrings,
  StaticShortcutStrings,
  scopeShortcuts,
  scopedStaticShortcutsToMap,
} from './shortcuts'

export const defaultSelectorFn: DaisySelectorFn = (themeName: string) => {
  return `[data-theme="${themeName}"]`
}

export const getSelectors = (
  themeNames: string[],
  selectorFn: DaisySelectorFn = defaultSelectorFn
): DaisySelectors => {
  const selectors: DaisySelectors = {}

  for (const themeName of themeNames) {
    selectors[themeName] = selectorFn(themeName)
  }

  return selectors
}

const themeColorsToKebabCase = (themeColors: DaisyColors): DaisyColors => {
  const convertedColors: DaisyColors = {}

  for (const [key, value] of Object.entries(themeColors)) {
    convertedColors[kebabCase(key)] =
      typeof value === 'string' ? value : themeColorsToKebabCase(value) // Recursively convert nested colors
  }

  return convertedColors
}

export const prefixThemeVars = (
  theme: DaisyExtendTheme,
  prefix: string
): void => {
  if (!theme.variables) {
    return
  }

  const variables: Record<string, string> = {}

  for (const [key, value] of Object.entries(theme.variables)) {
    if (key.startsWith('--')) {
      variables[`${prefix}${kebabCase(key.slice(2))}`] = value

      continue
    }

    variables[`${prefix}${kebabCase(key)}`] = value
  }

  theme.variables = variables
}

const extractSimpleColors = (colors: DaisyColors) => {
  const simpleColors: Record<string, string> = {}

  for (const [key, value] of Object.entries(colors)) {
    if (typeof value === 'string') {
      simpleColors[key] = value
    }
  }

  return simpleColors
}

export const inheritTheme = (
  theme: DaisyExtendTheme,
  themeName: DaisyDefaultThemeNames,
  defaultThemes: Record<string, DaisyExtendTheme>
): DaisyExtendTheme => {
  const inheritedTheme = defaultThemes[themeName]

  if (!inheritedTheme) {
    return theme
  }

  return mergeDeep<DaisyExtendTheme>(inheritedTheme, theme)
}

export const transformTheme = (
  theme: DaisyExtendTheme,
  defaultThemes: Record<string, DaisyExtendTheme>
): DaisyExtendTheme => {
  let inheritedTheme: DaisyExtendTheme = theme

  if (theme.inherit) {
    // Inherit from default themes
    // Color generated by daisy will override default theme colors
    inheritedTheme = inheritTheme(theme, theme.inherit, defaultThemes)
  }

  const themeColors = inheritedTheme.colors ?? {}
  // Only simple colors (string) will be generated
  const simpleColors = extractSimpleColors(themeColors)
  // Generate daisy color variants
  const convertedThemeColors = convertThemeColors(simpleColors)

  const { colors, variables, fontFamily, colorScheme } = convertedThemeColors

  const propsNoColors: DaisyExtendTheme = {
    variables: variables ?? {},
    fontFamily: fontFamily ?? {},
    colorScheme: colorScheme ?? '',
  }

  const convertedColors: DaisyExtendTheme = {
    colors: colors ?? {},
  }

  return mergeDeep<DaisyExtendTheme>(
    // First merge variables and font family
    // Values from theme (variables, font-family, etc) will override default values
    mergeDeep<DaisyExtendTheme>(propsNoColors, inheritedTheme),
    // Then merge colors generated by daisy
    convertedColors
  )
}

export const themeColorsToHSL = (themeColors: DaisyColors): DaisyColors => {
  const convertedColors: DaisyColors = {}

  for (const [key, value] of Object.entries(themeColors)) {
    convertedColors[key] =
      typeof value === 'string'
        ? colord(value).toHslString()
        : themeColorsToHSL(value) // Recursively convert nested colors
  }

  return convertedColors
}

// TODO: handle `base` colors
export const processThemes = (
  themes: DaisyThemesOrNot,
  defaultThemes: Record<string, DaisyGeneratedTheme>,
  varsPrefix: string
): DaisyThemes => {
  const processedThemes: Record<string, DaisyExtendTheme> = {}

  for (const [themeName, theme] of entriesIterable(themes)) {
    if (!theme || !themeName) {
      // Skip thems that are set to false
      continue
    }

    // Convert theme colors to kebab-case
    theme.colors = themeColorsToKebabCase(theme.colors ?? {})

    // Convert camelCase variable names to kebab-case
    prefixThemeVars(theme, '--')

    const processedTheme = transformTheme(theme, defaultThemes)

    // Add variables prefix
    prefixThemeVars(processedTheme, varsPrefix)

    if (processedTheme.colors) {
      processedTheme.colors = themeColorsToHSL(processedTheme.colors)
    }

    processedThemes[themeName] = processedTheme
  }

  return processedThemes
}

export const extractThemesShortcuts = (
  themes: DaisyThemes
): Record<string, Shortcut[]> => {
  const themeShortcuts: Record<string, Shortcut[]> = {}

  for (const [themeName, theme] of entriesIterable(themes)) {
    if (theme.shortcuts) {
      themeShortcuts[themeName] = resolveShortcuts(theme.shortcuts)
    }
  }

  return themeShortcuts
}

const scopeExtractedShortcuts = (
  themeShortcuts: Record<string, Shortcut[]>,
  selectors: Record<string, string | string[]>,
  rules: Rule[]
): [StaticShortcutStrings[], DynamicShortcutStrings[]] => {
  const scopedStaticShortcuts: StaticShortcutStrings[] = []
  const scopedDynamicShortcuts: DynamicShortcutStrings[] = []

  for (const [themeName, shortcuts] of entriesIterable(themeShortcuts)) {
    const themeSelectors = selectors[themeName]

    if (!themeSelectors) {
      continue
    }

    const [scopedStaticShortcut, scopedDynamicShortcut] = scopeShortcuts(
      shortcuts,
      themeSelectors,
      rules
    )

    scopedStaticShortcuts.push(...scopedStaticShortcut)
    scopedDynamicShortcuts.push(...scopedDynamicShortcut)
  }

  return [scopedStaticShortcuts, scopedDynamicShortcuts]
}

export const scopeThemeShortcuts = (
  themes: DaisyThemes,
  selectors: Record<string, string | string[]>,
  rules: Rule[],
  defaultMeta?: RuleMeta
): [GeneratedShortcutsIterable, DynamicShortcutStrings[]] => {
  const [scopedStaticShortcuts, scopedDynamicShortcuts] =
    scopeExtractedShortcuts(extractThemesShortcuts(themes), selectors, rules)

  return [
    scopedStaticShortcutsToMap(scopedStaticShortcuts, defaultMeta),
    scopedDynamicShortcuts,
  ]
}
